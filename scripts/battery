#!/bin/bash

# Скрипт для оповещения о низком заряде аккумулятора устройства
# и вывода модуля панели polybar

pb_modules_file="$HOME/.config/polybar/modules.ini"
pb_colors_file="$HOME/.config/polybar/colors.ini"
pb_icons=("" "" "")
pb_steps=10

capacity_file="/sys/class/power_supply/BAT1/capacity"
status_file="/sys/class/power_supply/BAT1/status"

notify_title="Заряд батареи"
notify_title_urgent="Низкий заряд батареи!"
notify_body="Текущий уровень заряда"
notify_body_urgent="Устройство следует подключить к источнику питания!"
notify_icon_labels=("empty" "caution" "low" "good" "full")
notify_icon_status=("-charging" "")
label_plug="---label---"
status_plug="---status---"
notify_icon="battery-${label_plug}${status_plug}-symbolic"

notify_name="${0##*/}"
notify_id=$(cat "$HOME/.local/scripts/notify-ids" | grep -oP "$notify_name \K([\d]+)" || echo 0)

# Остановить все работающие в фоне экземпляры данной программы
stop-daemon() {
	process_name=${0##*/}
	for pid in $(pgrep ${process_name}) ; do
		[ $pid != $$ ] && kill -s KILL -- $pid && echo "Процесс $process_name $pid был остановлен"
	done
}

# Цикл фоновой работы
daemon() {
	stop-daemon
	sleep 1s
	while :; do
    	update-polybar
		[[ $(get_status) != "Charging" ]] && [[ $(get_capacity) -le 15 ]] && \
			notify
		sleep 5
	done &

}

# Обновить модуль polybar
update-polybar() {
	polybar-msg action battery hook 0 > /dev/null
}

# Получить текущий заряд батареи
get_capacity() {
	cat $capacity_file
}

# Получить состояние питания
get_status() {
	cat $status_file
}

# Получить основные цвета панели polybar
get_pb_color() {
	color=()
	color+=($(grep -oP "background =\s*\K(#[a-fA-F0-9]+)" $pb_colors_file))
	color+=($(grep -oP "background-alt =\s*\K(#[a-fA-F0-9]+)" $pb_colors_file))
	color+=($(grep -oP "foreground =\s*\K(#[a-fA-F0-9]+)" $pb_colors_file))
	color+=($(grep -oP "foreground-alt =\s*\K(#[a-fA-F0-9]+)" $pb_colors_file))
	color+=($(grep -oP "foreground-inactive =\s*\K(#[a-fA-F0-9]+)" $pb_colors_file))
	color+=($(grep -oP "blue =\s*\K(#[a-fA-F0-9]+)" $pb_colors_file))
	color+=($(grep -oP "red =\s*\K(#[a-fA-F0-9]+)" $pb_colors_file))

	echo "${color[@]}"
}

# Получить элементы шкалы прогресса панели polybar
get_pb_bar() {
	bar=()
	bar+=($(grep -oP "^fill\s*=\s*\K([^\n]+)$" $pb_modules_file))
	bar+=($(grep -oP "^indicator\s*=\s*\K([^\n]+)$" $pb_modules_file))
	bar+=($(grep -oP "^empty\s*=\s*\K([^\n]+)$" $pb_modules_file))

	echo "${bar[@]}"
}

# Вывести форматированнуюю строку модуля polybar
polybar() {
	color=($(get_pb_color))
	bg=${color[0]}
	bga=${color[1]}
	fg=${color[2]}
	fga=${color[3]}
	fgi=${color[4]}
	fgu=${color[6]}
	prfx=${color[5]}
	prfxa=${color[6]}

	bar=($(get_pb_bar))
	fill=${bar[0]}
	indicator=${bar[1]}
	empty=${bar[2]}
   
	level=$(get_capacity)	
    status=$(get_status)

	[[ $level -le 5 ]] && \
		pb_icon="%{B$prfxa F$fga} ${pb_icons[0]} %{B- F-}" || \
		pb_icon="%{B$prfx F$fga} ${pb_icons[1]} %{B- F-}"
	[[ $status == "Charging" ]] && pb_icon="%{B$prfx F$fga} ${pb_icons[2]} %{B- F-}"
 
	bar="%{B$bga} "
	pos=$(( (level + pb_steps / 2) / pb_steps ))
	for i in $(seq 1 $pb_steps) ; do
		el=""
		[[ $i -gt $pos ]] && el="%{F$fgi}$empty%{F-}"
		[[ $i -eq $pos ]] && el="%{F$fg}$indicator%{F-}"
		[[ $i -lt $pos ]] && el="%{F$fg}$fill%{F-}"
		bar="$bar$el"
	done

	block="%{u$bg o$bg}%{+u}%{+o}%{A1:$1 --notify:}$pb_icon%{A4:brightness +:}%{A5:brightness -:}$bar %{A}%{A}%{A}%{B- F-}%{u- o-}"
	echo $block
}

# Вывести уведомление
notify() {
	level=$(get_capacity)
	status=$(get_status)

	icon=${notify_icon//$label_plug/${notify_icon_labels[4]}}
	title=$notify_title
	body="$notify_body ${level}%"
	urgent="low"
	[[ $level -le 75 ]] && icon=${notify_icon//$label_plug/${notify_icon_labels[3]}}
	[[ $level -le 45 ]] && icon=${notify_icon//$label_plug/${notify_icon_labels[2]}}
	[[ $level -le 15 ]] && icon=${notify_icon//$label_plug/${notify_icon_labels[1]}} && \
		title=$notify_title_urgent && \
		body="$notify_body ${level}%\n$notify_body_urgent" && \
		urgent="normal"
	[[ $level -le 5 ]] && icon=${notify_icon//$label_plug/${notify_icon_labels[0]}} && \
		urgent="critical"

	[[ $status == "Charging" ]] && icon=${icon//$status_plug/${notify_icon_status[0]}} && \
		title=$notify_title && \
		body="$notify_body ${level}%" && \
		urgent="low" || \
		icon=${icon//$status_plug/${notify_icon_status[1]}}
	
	notify-send -a "$notify_name" -r "$notify_id" -u "$urgent" -i "$icon" "$title" "$body"	
}

# Вывести справку скрипта
help() {
	echo -e "Скрипт для отображения информации о питании компьютера.\n"
	echo -e "\t-l\t--level\n\t\tВывести текущее уровень заряда батареи.\n"
	echo -e "\t-s\t--status\n\t\tВывести текущий статус заряда/разряда.\n"
	echo -e "\t-n\t--notify\n\t\tВывести всплывающее уведомление с информацией о питании.\n"
	echo -e "\t-p\t--polybar\n\t\tПолучить форматированный текст для модуля панели Polybar.\n"
	echo -e "\t-uыы\t--update\n\t\tПринудительно обновить соответствующий модуль панели Polybar.\n"
	echo -e "\t--daemon\n\t\tЗапустить фоновый цикл переодического обновления модуля панели Polybar.\n"
	echo -e "\t--stop-daemon\n\t\tОстановить фоновый цикл.\n"
	echo -e "\t-h\t--help\n\t\tВывести данную справку.\n"
	echo -e "Автор: allonny89"
}

# Если нет аргументов, то вызывается справка, а скрипт завершается
if [[ $# -eq 0 ]] ; then help ; exit 0 ; fi

# Последовательный разбор аргументов командной строки
while [[ $# -gt 0 ]] ; do
	case $1 in
		"-l" | "--level")
			get_capacity
			;;
		"-s" | "--status")
			get_status
			;;
		"-n" | "--notify")
			notify
			;;
		"-p" | "--polybar")
			polybar "$0"
			;;
		"-u" | "--update")
			update-polybar
			;;
		"-h" | "--help")
			help
			;;
		"--stop-daemon")
			stop-daemon
			;;
		"--daemon")
			daemon
			;;
		*)
            echo "Ошибка! Неизвестный аругмент $1."
            exit 1
            ;;
	esac
    
	shift
done

