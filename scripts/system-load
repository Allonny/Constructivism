#!/bin/bash

cpuusage_file="/tmp/cpuusage"
memusage_file="/tmp/memusage"
store=12
interval=2.5

pb_colors_file="$HOME/.config/polybar/colors.ini"
pb_cpu_icon=""
pb_mem_icon=""

threshold_caution=75
threshold_warning=90

[[ ! -f $cpuusage_file ]] && blank-cpu
[[ ! -f $memusage_file ]] && blank-mem

stop-daemon() {
	blank-cpu
	blank-mem
	process_name=${0##*/}	
	for pid in $(pgrep ${process_name}) ; do
		[ $pid != $$ ] && kill -s KILL -- $pid && echo "Процесс $process_name $pid был остановлен"
	done
}

daemon() {
	stop-daemon
	while :; do
		update-cpu
		update-mem
		polybar-msg action cpu hook 0 > /dev/null
		polybar-msg action mem hook 0 > /dev/null
		sleep $interval
	done &
}

get_pb_color() {
	color=()
	color+=($(grep -oP "background =\s*\K(#[a-fA-F0-9]+)" $pb_colors_file))
	color+=($(grep -oP "background-alt =\s*\K(#[a-fA-F0-9]+)" $pb_colors_file))
	color+=($(grep -oP "foreground =\s*\K(#[a-fA-F0-9]+)" $pb_colors_file))
	color+=($(grep -oP "foreground-alt =\s*\K(#[a-fA-F0-9]+)" $pb_colors_file))
	color+=($(grep -oP "blue =\s*\K(#[a-fA-F0-9]+)" $pb_colors_file))
	color+=($(grep -oP "yellow =\s*\K(#[a-fA-F0-9]+)" $pb_colors_file))
	color+=($(grep -oP "red =\s*\K(#[a-fA-F0-9]+)" $pb_colors_file))

	echo "${color[@]}"
}

polybar() {
	color=($(get_pb_color))
	bg=${color[0]}
	bga=${color[1]}
	fg=${color[2]}
	fga=${color[3]}
	prfx=${color[4]}
	prfxc=${color[5]}
	prfxw=${color[6]}

	icon=$1
	graph=$2
	value=$3

	prefix="%{B$prfx F$fga} $icon %{B- F-}"
	[[ $value -ge $threshold_caution ]] && prefix="%{B$prfxc F$fga} $icon %{B- F-}"
	[[ $value -ge $threshold_warning ]] && prefix="%{B$prfxw F$fga} $icon %{B- F-}"

	label="%{B$bga F$fg} $graph $value% %{B- F-}"

	block="%{u$bg o$bg}%{+u +o}$prefix%{A1:kitty --class=Htop 'htop':}$label%{A}%{u-}%{o-}"
	echo $block
}

blank-cpu() {
	[[ -f $cpuusage_file ]] && rm $cpuusage_file
	for (( i=0 ; i<=$store ; i++ )) ; do
		echo "0 0" >> $cpuusage_file
	done
}

blank-mem() {
	[[ -f $memusage_file ]] && rm $memusage_file
	for (( i=0 ; i < $store ; i++ )) ; do
		echo "0" >> $memusage_file
	done
}

current-cpu() {
	cat $cpuusage_file | tail -2 | awk '
	NR == 1 { u = -$1 ; t = -$2 ; next }
	{ u += $1 ; t += $2 ;
		if(t == 0) v = 0
		else v = int(u / t + 0.5);
		if(v >= 100) v = 99;
		printf("%02d", v);
	}'
}

current-mem() {
	cat $memusage_file | tail -1 | awk '{ v = $1 ; if(v >= 100) v = 99 ; printf("%02d", v) }'
}

histbars-cpu() {
	unigraph $(awk 'NR == 1 {
		u1 = $1 ; t1 = $2 ;
		next
	}{
		u0 = u1 ; t0 = t1 ;
		u1 = $1 ; t1 = $2 ;
		du = u1 - u0 ; dt = t1 - t0 ;
		if(dt == 0) 
			printf("0 ")
		else
			printf("%d ", int(du / dt + 0.5))
		}' $cpuusage_file)
}

histbars-mem() {
	readarray -t hist < $memusage_file
	unigraph ${hist[@]}
}

update-cpu() {
	newline=$(grep 'cpu ' /proc/stat | awk '{ u = ($2 + $4) * 100 ; t = $2 + $4 + $5 ; print u,t }')
	readarray -t hist < $cpuusage_file
	hist=("${hist[@]:$((-$store)):$store}" "$newline")
	[[ -f $cpuusage_file ]] && rm $cpuusage_file
	for line in "${hist[@]}" ; do
		echo $line >> $cpuusage_file
	done
}

update-mem() {
	newline=$(free | grep 'Mem' | awk '{ print int($3 * 100 / $2 + 0.5) }')
	readarray -t hist < $memusage_file
	hist=("${hist[@]:$((-$store + 1)):$(($store - 1))}" "$newline")
	[[ -f $memusage_file ]] && rm $memusage_file
	for line in "${hist[@]}" ; do
		echo $line >> $memusage_file
	done	
}

help() {
	echo "Help is coming soon!"
}

if [[ $# -eq 0 ]] ; then help ; exit 0 ; fi

while [[ $# -gt 0 ]] ; do
	case $1 in
		"-m" | "--module")
			case $2 in
				"cpu")	polybar $pb_cpu_icon $(histbars-cpu) $(current-cpu) ;;
				"mem")	polybar $pb_mem_icon $(histbars-mem) $(current-mem) ;;
				*)
					echo "Ошибка! Неизвестное значение $2 аргумента $1."
					exit 2
					;;
			esac
			shift
		;;
		"-r" | "--reset")
			case $2 in
				"cpu")	blank-cpu ;;
				"mem")	blank-mem ;;
				*)		blank-cpu ; blank-mem ;;
			esac
			shift

		;;
		"-h" | "--help")
			help
		;;
		"--stop-daemon")
			stop-daemon
			;;
		"--daemon")
			daemon
			;;
		*)
			echo "Ошибка! Неизвестный аргумент $1."
			exit 1
			;;
	esac

	shift
done

